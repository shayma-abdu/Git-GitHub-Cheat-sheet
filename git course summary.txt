* git log
* git log -n x where x is the number of commits to be shown
To stop viewing git log output, press q (which stands for quit).
*git diff commit_id commit_id
*git log --stat
*git clone followed by a space and the repository URL
*git config --global color.ui auto To get colored diff output, run 
*git checkout commit_id
*cd ~ to move to home directory 
*mv from_initial_path to_destination_path_with_new_name
* git config --global core.editor "'C:/Program Files/Sublime Text 2/sublime_text.exe' -n -w"
* ls -a to see all hidden files
* git init to create a git repository Only files from that directory (and subdirectories inside that directory) will be contained in that repository
* git add file_to_add to specify which files to add from the working directory to the staging area
* git commit
* git status
* git commit -m "commit message"
* git diff  to compare changes between working directory and staging area
* git diff --staged to compare changes between staging area and the most recent commit in the repository
* git reset --hard which discards any changes in either the working directory or the staging area. this is not reversable. 
* git checkout branch_name
* git branch which shows current branches
* git branch new_branch_name creates a new branch with the new_branch_name
* git checkout -b new_branch_name is equivalent to git branch new_branch_name and git checkout new_branch_name
* git log --graph --oneline branch_1 branch_2
* git merge branch_2 branch_3 So if you have branch_1 checked out, and you run git merge branch_2 branch_3, the merged version will combine branch1 as well as branch2 and branch3.
* git merge branch_2 if you have branch_1 check out, it will merge branch_2 into branch_1
* git gc to actively run git's garbage collection
* git merge --abort to restore file to their state beore starting the merge
* git show commit_id to show the changes introduced by a commit compared to its parent
* git config --global core.autocrlf ture to manage conflicts in newline characters betweeen windows and unix systems. 
* git config --global credential.helper wincred to store credential when interacting github
* git branch -d branch_name which deletes a branch label
* git remote to view remote repositories (remotes)
* git remote add repository name repository_url to create a remote label to a remote repository. its standard to name the remote origin if it is only one remote.
* git remote -v to view more information about remotes
* git push





notes:
* branches are labels
* master is the main branch
* head is the commit that you are currently in
* "detached head" means looking at a commit that wasnt labeled with a branch name
* each commit stores a reference of its parent commit
* after fixing a merge conflict, you still need to add the conflict fixes and then commit it to conclude the merge
* you could use git checkout branch_name to checkout a remote branch created by other collaborators. 

intersctive shell, framework, library, texteditor







